#!/usr/bin/env node

var leeloo = require("../lib/leeloo"),
	cmd = process.argv[2] || "help",
	net = require("net"),
	deliverCommand = function(command, callback) {
		var conn = net.createConnection(1997),
			response = "";

		conn.setEncoding("utf8");
		conn.on("connect", function() { 
			conn.write(JSON.stringify(command));
		});
		conn.on("close", function(error) { 
		});
		conn.on("data", function(chunk) { 
			response = chunk;
			conn.end();
		});
		conn.on("drain", function() { 
		});
		conn.on("end", function() {
			callback && callback(null, response && JSON.parse(response)); 
		});
		conn.on("error", function(error) { 
			callback && callback(error); 
		});
	};

switch (cmd) {
	case "list":
		deliverCommand({"command": "list"}, function(error, response) {
			var rlen = (response && response.jobs && response.jobs.length) || 0;

			if (rlen) {
				response.jobs.forEach(function(job, r) {
					console.log(job.w, job.t, job.s);
					
					if (r == rlen - 1) {
						process.exit();
					}
				});
			}
			else {
				process.exit();
			}
		});
		break;
	case "schedule":
		var when = process.argv[3] && !isNaN(process.argv[3]) || 10000;
		deliverCommand({"command": "schedule", "params": {"w": 600000}});
		break;
	case "start-server":
		leeloo.startServer(function(error) {
			error && console.log(error.message);
		});
		break;
	case "status":
		deliverCommand({"command": "status"}, function(error, response) {
			console.log("leeloo has been awake for " + response.uptime + "ms and is currently " + response.status);
		});
		break;
	case "stop-server":
		deliverCommand({"command": "stopServer"}, function(error, response) {
			console.log(response);
			process.exit();
		});
		break;		
	default:
		leeloo.help(function() {
			process.exit();
		});
}

